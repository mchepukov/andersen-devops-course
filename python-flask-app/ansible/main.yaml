---
- hosts: all
  become: yes
  tasks:
    - name: Apply firewall rules
      include_tasks: "firewall.yaml"
      when: apply_firewall_rules

    - name: Configure settings for sshd service
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regex: "^(#)?{{item.key}}"
        line: "{{item.key}} {{item.value}}"
        state: present
      loop:
        - { key: "PermitRootLogin", value: "no" }
        - { key: "PasswordAuthentication", value: "no" }
      notify:
        - Restart sshd

    - name: Install additional packages
      apt:
        pkg:
          - python-pip
          - python3-pip
          - python-setuptools
        state: present
        update_cache: yes

    - name: Copy Flask application to {{ installation_dir }}
      copy:
        src: ../app.py
        dest: "{{ installation_dir }}/"

    - name: Copy Flask requirements to {{ installation_dir }}
      copy:
        src: ../requirements.txt
        dest: "{{ installation_dir }}/"

    - name: Copy Flask template files
      copy:
        src: ../../templates/
        dest: "{{ installation_dir }}/templates/"

    - name: Copy emoji_lib.txt to {{ installation_dir }}
      copy:
        src: ../emoji_lib.txt
        dest: "{{ installation_dir }}/"

    - name: Install virtualenv via pip
      pip:
        name: virtualenv
        executable: pip3

    - name: Install requirements to {{ installation_dir }}
      pip:
        requirements: "{{ installation_dir }}/requirements.txt"
        virtualenv: "{{ installation_dir }}/venv"
        virtualenv_python: python3

    - name: Create {{ installation_dir }}/ssl/ directory
      file:
        path: "{{ installation_dir }}/ssl/"
        state: directory

    - name: Copy certificates
      copy:
        content: "{{ item.content }}"
        dest: "{{ installation_dir }}/ssl/{{ item.name }}"
        owner: root
        group: root
        mode: "u=rw,g=r,o="
      with_items:
      # Certificates are stored encrypted in files/ssl/certificates.yaml
        - "{{ certificates }}"

    - name: Create flaskapp systemd service file
      template:
        src: templates/flaskapp.service.j2
        dest: /etc/systemd/system/flaskapp.service
        owner: root
        group: root
        force: yes
      notify:
        - Start flask application

  handlers:
    - name: Start flask application
      ansible.builtin.service:
        name: flaskapp
        state: restarted
        enabled: yes
        daemon_reload: true

    - name: Restart sshd
      ansible.builtin.service:
        name: sshd
        state: restarted

  vars_files:
    - files/ssl/certificates.yaml
